from flask import Flask, request, jsonify
import os, requests, base64

app = Flask(__name__)

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
MY_SECRET = os.getenv("MY_SECRET")
GITHUB_USER = "AarushiVe"   # your GitHub username

@app.route("/", methods=["GET"])
def home():
    return "✅ LLM API is running on Render!"

@app.route("/api-endpoint", methods=["POST"])
def api_endpoint():
    data = request.get_json(force=True)

    # ---- 1️⃣ Verify Secret ----
    if data.get("secret") != MY_SECRET:
        return jsonify({"error": "Invalid secret"}), 403

    email = data.get("email")
    task = data.get("task", "demo-task")
    round_num = data.get("round", 1)
    brief = data.get("brief", "No brief provided.")
    evaluation_url = data.get("evaluation_url", "")
    nonce = data.get("nonce", "")
    repo_name = f"{task}"
    repo_api = f"https://api.github.com/repos/{GITHUB_USER}/{repo_name}"

    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github+json"
    }

    # ---- 2️⃣ Check if repo exists ----
    repo_exists = requests.get(repo_api, headers=headers)
    if repo_exists.status_code == 404:
        # ---- Create repo for round 1 ----
        payload = {"name": repo_name, "private": False, "auto_init": True}
        r = requests.post(f"https://api.github.com/user/repos", headers=headers, json=payload)
        if r.status_code not in (200, 201):
            return jsonify({"error": "Failed to create repo", "details": r.text}), 500

    # ---- 3️⃣ Build HTML content ----
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head><title>{task}</title></head>
    <body>
        <h1>{task}</h1>
        <p>Round: {round_num}</p>
        <p>{brief}</p>
        <p>Email: {email}</p>
    </body>
    </html>
    """

    readme_text = f"# {task}\n\nRound {round_num}\n\n## Brief\n{brief}\n\nGenerated by llmapi."

    # ---- 4️⃣ Commit or Update files ----
    def put_file(path, content, message):
        url = f"{repo_api}/contents/{path}"
        # check if file exists (need sha for update)
        get_file = requests.get(url, headers=headers)
        sha = get_file.json().get("sha") if get_file.status_code == 200 else None
        payload = {
            "message": message,
            "content": base64.b64encode(content.encode()).decode(),
            "branch": "main"
        }
        if sha:
            payload["sha"] = sha
        return requests.put(url, headers=headers, json=payload)

    put_file("index.html", html_content, f"Update index.html for round {round_num}")
    put_file("README.md", readme_text, f"Update README.md for round {round_num}")

    # ---- 5️⃣ Ensure Pages is enabled ----
    pages_api = f"{repo_api}/pages"
    pages_check = requests.get(pages_api, headers=headers)
    if pages_check.status_code != 200:
        enable_payload = {"source": {"branch": "main", "path": "/"}}
        requests.post(pages_api, headers=headers, json=enable_payload)

    pages_url = f"https://{GITHUB_USER}.github.io/{repo_name}/"

    # ---- 6️⃣ Notify Evaluation URL ----
    if evaluation_url:
        payload = {
            "email": email,
            "task": task,
            "round": round_num,
            "nonce": nonce,
            "repo_url": f"https://github.com/{GITHUB_USER}/{repo_name}",
            "commit_sha": "latest",
            "pages_url": pages_url,
        }
        try:
            res = requests.post(evaluation_url, json=payload, headers={"Content-Type": "application/json"})
            res.raise_for_status()
        except Exception as e:
            print("Evaluation notify failed:", e)

    return jsonify({
        "repo_name": repo_name,
        "round": round_num,
        "status": "updated" if round_num == 2 else "accepted",
        "url": pages_url
    }), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
